﻿﻿﻿@{
    ViewData["Title"] = "Home Page";
}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h1 class="display-5 text-center mb-0">Генериране на изображение</h1>
                </div>
                <div class="card-body">                   
                    <!-- Секция за въвеждане на текст -->
                    <div class="row mb-3">
                        <div class="col-12">
                            <input type="text" class="form-control form-control-lg" id="text-prompt" placeholder="моля въведете текст">
                        </div>
                    </div>
                    
                    <!-- Секция за бутони -->
                    <div class="row mb-3">
                        <div class="col-12 d-flex flex-wrap justify-content-start align-items-stretch">
                            @Html.AntiForgeryToken()
                            <!-- Обвивка за GO бутона за контрол на ширината -->
                            <div class="me-2 mb-2" style="flex-grow: 1; flex-basis: 0; min-width: 30%;"> <!-- Приблизително 1/3, позволява на другите да се разположат -->
                                <button class="btn btn-success btn-lg w-100 h-100" id="go-button">GO</button>
                            </div>
                            <button class="btn btn-info btn-lg me-2 mb-2" id="rand-button">RAND</button>
                            <button class="btn btn-warning btn-lg me-2 mb-2" id="clear-button">CLEAR</button> <!-- Променен цвят за по-добра видимост -->
                            <button class="btn btn-info btn-lg me-2 mb-2" id="check-pending-job-button" title="Провери статуса на последната чакаща заявка">ПРОВЕРИ СТАТУС</button> <!-- Променен ID, текст, title и цвят -->
                            <button class="btn btn-secondary btn-lg mb-2" id="settings-button">SET</button> <!-- Променен цвят за по-добра видимост -->
                        </div>
                    </div>
                    
                    <!-- Панел за допълнителни настройки (скрит по подразбиране) -->
                    <div id="advanced-settings-panel" class="mt-3 p-3 border rounded" style="display: none;">
                        <h5 class="mb-3">Допълнителни настройки</h5>
                        
                        <div class="mb-3">
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="checkbox" value="" id="enable-cfg-scale">
                                <label class="form-check-label" for="enable-cfg-scale">
                                    Активирай CFG Scale
                                </label>
                            </div>
                            <label for="cfg-scale-slider" class="form-label">CFG Scale: <span id="cfg-scale-value">5</span></label>
                            <input type="range" class="form-range" min="1" max="9" step="0.5" value="5" id="cfg-scale-slider" disabled>
                        </div>

                        <div class="mb-3">
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="checkbox" value="" id="enable-scheduler">
                                <label class="form-check-label" for="enable-scheduler">
                                    Активирай Scheduler
                                </label>
                            </div>
                            <label class="form-label d-block">Scheduler:</label>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="scheduler-options" id="scheduler-normal" value="normal" checked disabled>
                                <label class="form-check-label" for="scheduler-normal">Normal</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="scheduler-options" id="scheduler-karras" value="karras" disabled>
                                <label class="form-check-label" for="scheduler-karras">Karras</label>
                            </div>
                        </div>

                        <div class="mb-3">                
                            <label for="batch-scale-slider" class="form-label">Batch Size: <span id="batch-scale-value">1</span></label>
                            <input type="range" class="form-range" min="1" max="10" step="1" value="1" id="batch-scale-slider">
                        </div>


                        <!-- Поле за положителни настройки -->
                        <div class="mb-3">
                            <label for="positive-prompt-additions" class="form-label">Положителни настройки (добавки към промпта):</label>
                            <textarea class="form-control" id="positive-prompt-additions" rows="2" placeholder="Напр. best quality, masterpiece"></textarea>
                        </div>

                        <!-- Чекбокс за използване на системния отрицателен промпт -->
                        <div class="form-check mb-2">
                            <input class="form-check-input" type="checkbox" id="use-system-negative-prompt">
                            <label class="form-check-label" for="use-system-negative-prompt">
                            Използвай системния отрицателен промпт
                            </label>
                        </div>

                        <!-- Поле за отрицателни настройки -->
                        <div class="mb-3">
                            <label for="negative-prompt-additions" class="form-label">Отрицателни настройки (нежелани елементи):</label>
                            <textarea class="form-control" id="negative-prompt-additions" rows="2" placeholder="Напр. worst quality, ugly, deformed"></textarea>
                        </div>

                    </div>
                    <!-- Край на панела за допълнителни настройки -->

                    <!-- Секция за показване на изображение -->
                    <div class="row mt-4">
                        <div class="col-md-12">
                            <div id="image-display-area" class="text-center border rounded p-2" style="position: relative;">
                                <img src="https://picsum.photos/800/600" class="img-fluid rounded" alt="Генерирано изображение" id="generated-image" style="opacity: 1; transition: opacity 0.3s ease-in-out;">
                                <!-- Спинерът е преместен тук и стилизиран да е в центъра и по-голям -->
                                <div id="loading-spinner" style="display: none; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 10;">
                                    <div class="spinner-border text-light" role="status" style="width: 4rem; height: 4rem;"> <!-- Промяна на text-primary на text-light -->
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                </div>
                            </div>
                            <!-- Бутон за сваляне на изображението -->
                            <button class="btn btn-secondary btn-sm mt-2" id="download-image-button" style="display:none;">Свали изображението</button>

                        </div>
                    </div>
                              
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // --- Логика за показване на последно запазено изображение ---
            const lastGeneratedDataUrl = localStorage.getItem('lastGeneratedImageUrl');
            if (lastGeneratedDataUrl) {
                const $imageDisplayArea = $('#image-display-area');
                // Намираме спинъра вътре в image-display-area, ако съществува там
                const $spinner = $imageDisplayArea.find('#loading-spinner'); 
                $imageDisplayArea.children().not($spinner).remove(); // Изчистваме предишни изображения, запазваме спинъра

                // Конвертираме запазения data:URL към Blob URL за показване
                const parts = lastGeneratedDataUrl.split(',');
                if (parts.length === 2 && parts[0].startsWith('data:image/')) {
                    const base64Data = parts[1];
                    const contentTypeMatch = parts[0].match(/^data:(image\/[a-z]+);base64$/);
                    const contentType = contentTypeMatch ? contentTypeMatch[1] : 'image/png';

                    // Използваме същата функция base64ToBlob от buttons.js
                    // Уверете се, че base64ToBlob е достъпна в този скоуп или я дефинирайте отново тук,
                    // или я направете глобална (не е най-добрата практика, но за целта на примера)
                    // За простота, ще приемем, че е достъпна (напр. дефинирана преди $(document).ready в buttons.js)
                    if (typeof base64ToBlob === 'function') {
                        const blob = base64ToBlob(base64Data, contentType);
                        const blobUrl = URL.createObjectURL(blob);

                        const imgElement = $('<img>')
                            .attr('src', blobUrl)
                            .addClass('img-fluid rounded mb-2')
                            .attr('alt', 'Последно генерирано изображение')
                            .css('opacity', 1);
                        $imageDisplayArea.append(imgElement);

                        // Показваме бутона за сваляне, ако има запазено изображение
                        // Бутонът за сваляне ще използва оригиналния data:URL за по-добра съвместимост
                        const $downloadButton = $('#download-image-button');
                        if ($downloadButton.length) {
                            $downloadButton.show().off('click').on('click', function() {
                                const link = document.createElement('a');
                                link.href = lastGeneratedDataUrl; // Използваме data:URL за сваляне
                                link.download = 'generated_image.png';
                                document.body.appendChild(link);
                                link.click();
                                document.body.removeChild(link);
                            });
                        }
                    } else {
                        console.error("base64ToBlob function is not defined. Cannot display persisted image as blob.");
                        // Fallback: покажи директно data:URL, ако функцията липсва
                        $imageDisplayArea.append($('<img>').attr('src', lastGeneratedDataUrl).addClass('img-fluid rounded mb-2').attr('alt', 'Последно генерирано изображение').css('opacity', 1));
                    }
                }
            }
            // --- Край на логиката за показване на последно запазено изображение ---

            const promptInput = $('#text-prompt');
            const promptStorageKey = 'userTextPrompt';

            // Зареждане на запазения текст при зареждане на страницата
            const savedPrompt = localStorage.getItem(promptStorageKey);
            if (savedPrompt) {
                promptInput.val(savedPrompt);
            }

            // Save text on every change
            promptInput.on('input', function() {
                localStorage.setItem(promptStorageKey, $(this).val());
            });

            // Initialize functionalities from buttons.js
            initializeImageGenerationAndUI(); // Handles GO, RAND, and CLEAR button logic
            initializePendingJobState();      // Sets up initial state for pending job (no auto-polling)

            // Initialize style selection buttons
            // Collect all unique data-btn-type values and initialize for each.
            let initializedButtonTypes = {};
            $('[data-btn-type]').each(function() {
                let type = $(this).data('btn-type');
                if (type && !initializedButtonTypes[type]) {
                    newButtonsFunctionality(type); // From buttons.js
                    initializedButtonTypes[type] = true;
                }
            });

            initializeAdvancedSettingsToggle(); // For the SETTINGS panel (from buttons.js)
            
            // praska(); // If the praska button and functionality are still needed (from buttons.js)

            // Почистване на стари съобщения (ако е необходимо)
            $('.alert.alert-success.alert-dismissible').remove(); // По-общо премахване на alert-и
        });
    </script>
}